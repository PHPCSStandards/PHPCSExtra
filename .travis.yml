os: linux
dist: xenial

language: php

## Cache composer and apt downloads.
cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

php:
  - 5.6
  - 7.0
  - 7.1
  - 7.2

env:
  jobs:
    # PHPCS `master`.
    - PHPCS_VERSION="dev-master" LINT=1
    # Lowest supported PHPCS version.
    - PHPCS_VERSION="3.3.1"

# Define the stages used.
# For non-PRs, only the sniff and quicktest stages are run.
# For pull requests and merges, the full script is run (skipping quicktest).
# Note: for pull requests, "develop" is the base branch name.
# See: https://docs.travis-ci.com/user/conditions-v1
stages:
  - name: sniff
  - name: validate
  - name: quicktest
    if: type = push AND branch NOT IN (stable, develop)
  - name: test
    if: branch IN (stable, develop)
  - name: coverage
    if: branch IN (stable, develop)

jobs:
  fast_finish: true

  include:
    #### SNIFF STAGE ####
    - stage: sniff
      php: 7.4
      install:
        # Set up CS check.
        # - Using PHPCS `master` as an early detection system for bugs upstream.
        # - COMPOSER_ROOT_VERSION is needed to get round the (upcoming) recursive dependency when using CI.
        - export COMPOSER_ROOT_VERSION="1.99.99"
        - travis_retry composer remove --dev phpunit/phpunit --no-update --no-scripts
        - travis_retry composer require --no-update squizlabs/php_codesniffer:"dev-master"
        - travis_retry composer install-devcs
      before_script: skip
      script:
        # Check the code style of the code base.
        - vendor/bin/phpcs
      after_success: skip

    - stage: validate
      php: 7.4
      addons:
        apt:
          packages:
            - libxml2-utils
      before_script: skip
      script:
        # Validate the composer.json file.
        # @link https://getcomposer.org/doc/03-cli.md#validate
        - composer validate --no-check-all --strict

        # Validate the xml files.
        # @link http://xmlsoft.org/xmllint.html
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./NormalizedArrays/ruleset.xml
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./Universal/ruleset.xml

        # Check the code-style consistency of the xml files.
        - diff -B ./NormalizedArrays/ruleset.xml <(xmllint --format "./NormalizedArrays/ruleset.xml")
        - diff -B ./Universal/ruleset.xml <(xmllint --format "./Universal/ruleset.xml")

        # Check that the sniffs available are feature complete.
        - composer check-complete
      after_success: skip

    #### QUICK TEST STAGE ####
    # This is a much quicker test which only runs the unit tests and linting against the low/high
    # supported PHP/PHPCS combinations.
    # These are basically the same builds as in the Coverage stage, but then without doing
    # the code-coverage.
    - stage: quicktest
      php: 7.4
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 7.3
      env: PHPCS_VERSION="3.3.1"

    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="3.3.1"

    #### TEST STAGE ####
    # Additional builds to prevent issues with PHPCS versions incompatible with certain PHP versions.
    - stage: test
      php: 8.0
      env: PHPCS_VERSION="dev-master" LINT=1
      # PHPCS is only compatible with PHP 8.0 as of version 3.5.7.
    - php: 8.0
      env: PHPCS_VERSION="3.5.7"
      # PHPCS is only compatible with PHP 7.4 as of version 3.5.0.
    - php: 7.4
      env: PHPCS_VERSION="3.5.0"
    - php: 7.3
      env: PHPCS_VERSION="dev-master" LINT=1

    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="3.3.1"

    - php: 7.4
      env: PHPCS_VERSION="4.0.x-dev@dev"

    - php: "nightly"
      env: PHPCS_VERSION="dev-master" LINT=1

    #### CODE COVERAGE STAGE ####
    # N.B.: Coverage is only checked on the lowest and highest stable PHP versions for all PHPCS versions.
    # These builds are left out off the "test" stage so as not to duplicate test runs.
    # The script used is the default script below, the same as for the `test` stage.
    - stage: coverage
      php: 7.4
      env: PHPCS_VERSION="dev-master" LINT=1 COVERALLS_VERSION="^2.0"
    - php: 7.3
      env: PHPCS_VERSION="3.3.1" COVERALLS_VERSION="^2.0"

    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1 COVERALLS_VERSION="^1.0"
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="3.3.1" COVERALLS_VERSION="^1.0"

  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - env: PHPCS_VERSION="4.0.x-dev@dev"


before_install:
  # Speed up build time by disabling Xdebug when its not needed.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Coverage" ]]; then
      phpenv config-rm xdebug.ini || echo 'No xdebug config.'
    fi

  - export XMLLINT_INDENT="    "

  # On stable PHPCS versions, allow for PHP deprecation notices.
  # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Sniff" && $PHPCS_BRANCH != "dev-master" ]]; then
      echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

  # Turn on Xdebug code coverage mode in case Xdebug 3 is being used.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      echo 'xdebug.mode = coverage' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi


install:
  # Set up test environment using Composer.
  - travis_retry composer require --no-update --no-scripts squizlabs/php_codesniffer:${PHPCS_VERSION}
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      travis_retry composer require --no-update --no-suggest --no-scripts php-coveralls/php-coveralls:${COVERALLS_VERSION}
    fi

  - |
    if [[ "${PHPCS_VERSION:0:3}" == "4.0" ]]; then
      # Remove devtools as it will not (yet) install on PHPCS 4.x.
      travis_retry composer remove --dev phpcsstandards/phpcsdevtools --no-update
      # --prefer-source ensures that the PHPCS native unit test framework will be available in PHPCS 4.x.
      travis_retry composer install --prefer-source --no-suggest
    elif [[ $TRAVIS_PHP_VERSION == "nightly" || $TRAVIS_PHP_VERSION == "8.0" ]]; then
      # Ignore PHPUnit platform requirements for installing on nightly.
      travis_retry composer install --prefer-dist --no-suggest --ignore-platform-reqs
    else
      # --prefer-dist will allow for optimal use of the travis caching ability.
      travis_retry composer install --prefer-dist --no-suggest
    fi
    # The Composer PHPCS plugin takes care of setting the installed_paths for PHPCS.


before_script:
  - if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then mkdir -p build/logs; fi
  - phpenv rehash


script:
  # Lint PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then composer lint; fi

  # Run the unit tests.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Coverage" ]]; then
      composer test
    elif [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      composer coverage
    fi

after_success:
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" && $COVERALLS_VERSION == "^1.0" ]]; then
      php vendor/bin/coveralls -v -x build/logs/clover.xml
    fi
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" && $COVERALLS_VERSION == "^2.0" ]]; then
      php vendor/bin/php-coveralls -v -x build/logs/clover.xml
    fi
